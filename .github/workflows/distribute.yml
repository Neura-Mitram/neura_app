name: Build & Distribute Neura

on:
  workflow_dispatch:
    inputs:
      build_mode:
        description: 'Build type'
        required: true
        default: 'release'
        type: choice
        options:
          - release
          - debug
      build_format:
        description: 'Build format'
        required: true
        default: 'apk'
        type: choice
        options:
          - apk
          - aab

env:
  BUILD_MODE: ${{ github.event.inputs.build_mode }}
  BUILD_FORMAT: ${{ github.event.inputs.build_format }}

jobs:
  build:
    name: üöÄ Build & Distribute
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: üîÅ Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for versioning or tagging

      - name: ‚öôÔ∏è Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: üßπ Clean Gradle cache (optional but required for Kotlin DSL)
        run: rm -rf ~/.gradle/caches

      - name: ‚öôÔ∏è Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.32.8"
          channel: 'stable'
          cache: true

      - name: üì¶ Cache Flutter & Gradle deps
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            android/.gradle
            .dart_tool
            build
          key: ${{ runner.os }}-flutter-${{ hashFiles('pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-flutter-

      - name: üîê Write google-services.json
        run: |
          mkdir -p android/app
          echo '${{ secrets.FIREBASE_SERVICES }}' > android/app/google-services.json
          echo "‚úÖ Google services configured"

      - name: üì¶ Install Flutter dependencies
        run: flutter pub get

      - name: üì• Pre-cache Flutter engine artifacts
        run: flutter precache --android

      - name: üîë Configure signing keys (release only)
        if: ${{ env.BUILD_MODE == 'release' }}
        run: |
          echo '${{ secrets.ANDROID_KEYSTORE }}' | base64 -d > android/keystore.jks
          echo "storePassword=${{ secrets.ANDROID_STORE_PASSWORD }}" > android/key.properties
          echo "keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}" >> android/key.properties
          echo "storeFile=../keystore.jks" >> android/key.properties

      - name: üèóÔ∏è Build APK or AAB
        run: |
          echo "üì¶ Building $BUILD_FORMAT in $BUILD_MODE mode..."
          if [ "$BUILD_MODE" = "release" ]; then
            if [ "$BUILD_FORMAT" = "apk" ]; then
              flutter build apk --release --split-per-abi --no-shrink
            else
              flutter build appbundle --release --no-shrink
            fi
          else
            flutter build apk --debug --split-per-abi
          fi

      - name: üßÆ Set artifact path
        run: |
          if [ "$BUILD_FORMAT" = "aab" ]; then
            echo "ARTIFACT_PATH=build/app/outputs/bundle/release/app-release.aab" >> $GITHUB_ENV
          elif [ "$BUILD_MODE" = "release" ]; then
            echo "ARTIFACT_PATH=build/app/outputs/apk/release/app-release.apk" >> $GITHUB_ENV
          else
            echo "ARTIFACT_PATH=build/app/outputs/apk/debug/app-debug.apk" >> $GITHUB_ENV
          fi
          echo "ARTIFACT_NAME=Neura-${{ env.BUILD_MODE }}-${{ env.BUILD_FORMAT }}-$(date +%Y%m%d-%H%M)" >> $GITHUB_ENV

      - name: üîí Verify code signing (release only)
        if: ${{ env.BUILD_MODE == 'release' }}
        run: |
          if [ "$BUILD_FORMAT" = "apk" ]; then
            apksigner verify --verbose ${{ env.ARTIFACT_PATH }} || exit 1
          else
            jarsigner -verify -verbose -certs ${{ env.ARTIFACT_PATH }} || exit 1
          fi

      - name: üöÄ Upload to Firebase App Distribution (release only)
        if: ${{ env.BUILD_MODE == 'release' }}
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.FIREBASE_APP_ID }}
          token: ${{ secrets.FIREBASE_TOKEN }}
          groups: testers
          file: ${{ env.ARTIFACT_PATH }}
          releaseNotes: |
            üöÄ Neura v1.0.0+1 (${{ env.BUILD_FORMAT }})
            Built: $(date +'%Y-%m-%d %H:%M')

      - name: ‚¨ÜÔ∏è Upload artifact to GitHub
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ARTIFACT_PATH }}
          retention-days: 7

      - name: ü©∫ Flutter Doctor (on failure)
        if: failure()
        run: flutter doctor -v
