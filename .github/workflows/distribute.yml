name: Build & Distribute Neura

on:
  workflow_dispatch:
    inputs:
      build_mode:
        description: 'Build type'
        required: true
        default: 'release'
        type: choice
        options: [release, debug]
      build_format:
        description: 'Build format'
        required: true
        default: 'apk'
        type: choice
        options: [apk, aab]

env:
  BUILD_MODE: ${{ github.event.inputs.build_mode }}
  BUILD_FORMAT: ${{ github.event.inputs.build_format }}
  ANDROID_HOME: /usr/local/lib/android/sdk

jobs:
  build:
    name: 🚀 Build & Distribute
    runs-on: ubuntu-latest
    timeout-minutes: 40

    steps:
      - name: 🔁 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ⚙️ Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: 📦 Cache Gradle & Maven
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.m2
          key: gradle-maven-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-maven-${{ runner.os }}-

      - name: 📦 Cache Kotlin compiler & serialization JARs
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlin
            ~/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlinx
          key: kotlin-jars-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            kotlin-jars-${{ runner.os }}-

      - name: 📦 Cache Android SDK
        uses: actions/cache@v4
        with:
          path: ${{ env.ANDROID_HOME }}
          key: android-sdk-${{ runner.os }}-35
          restore-keys: |
            android-sdk-${{ runner.os }}-

      - name: 📦 Install Android SDK (minimal, with retries)
        run: |
          set -e
          sudo mkdir -p $ANDROID_HOME
          sudo apt-get update -y
          sudo apt-get install -y wget unzip tar
          export PATH=$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$PATH

          if [ ! -d "$ANDROID_HOME/cmdline-tools/latest" ]; then
            echo "🆕 Installing Android SDK Command Line Tools..."
            for i in 1 2 3; do
              wget --timeout=30 --tries=3 https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -O cmdline-tools.zip && break
              echo "Retry $i for SDK tools..."
              sleep 5
            done
            sudo unzip -q cmdline-tools.zip -d $ANDROID_HOME
            sudo mkdir -p $ANDROID_HOME/cmdline-tools/latest
            sudo mv $ANDROID_HOME/cmdline-tools/* $ANDROID_HOME/cmdline-tools/latest/ || true
          else
            echo "✅ Android SDK already cached"
          fi

          yes | sdkmanager --licenses
          for pkg in "platform-tools" "platforms;android-35" "build-tools;35.0.0"; do
            for i in 1 2 3; do
              sdkmanager "$pkg" && break
              echo "Retry $i for $pkg..."
              sleep 5
            done
          done

      - name: ⚙️ Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.32.8"
          channel: 'stable'
          cache: true

      - name: 📦 Cache Flutter deps
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            .dart_tool
          key: flutter-deps-${{ runner.os }}-${{ hashFiles('pubspec.lock') }}
          restore-keys: |
            flutter-deps-${{ runner.os }}-

      - name: 🔐 Write google-services.json
        run: |
          mkdir -p android/app
          echo '${{ secrets.FIREBASE_SERVICES }}' > android/app/google-services.json
          echo "✅ Google services configured"

      - name: 🔄 Clean Flutter build
        run: flutter clean

      - name: 📦 Install Flutter dependencies
        run: flutter pub get

      - name: 📥 Pre-cache Flutter engine
        run: flutter precache --android

      - name: 🛠️ Gradle settings workaround
        run: echo "android.repositoriesMode=preferSettings" >> gradle.properties

      - name: 🔑 Configure signing keys (release only)
        if: ${{ env.BUILD_MODE == 'release' }}
        run: |
          echo '${{ secrets.ANDROID_KEYSTORE }}' | base64 -d > android/keystore.jks
          echo "storePassword=${{ secrets.ANDROID_STORE_PASSWORD }}" > android/key.properties
          echo "keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}" >> android/key.properties
          echo "storeFile=../keystore.jks" >> android/key.properties

      - name: 🏗️ Build APK/AAB
        run: |
          echo "📦 Building $BUILD_FORMAT in $BUILD_MODE mode..."
          if [ "$BUILD_MODE" = "release" ]; then
            if [ "$BUILD_FORMAT" = "apk" ]; then
              flutter build apk --release --no-shrink
            else
              flutter build appbundle --release --no-shrink
            fi
          else
            flutter build apk --debug
          fi

      - name: 🧮 Find build artifact
        run: |
          FILE_PATH=$(find build/app -type f \( -name "*.apk" -o -name "*.aab" \) | head -n 1)
          if [ -z "$FILE_PATH" ]; then
            echo "❌ No build artifact found!"
            echo "🔍 Listing build outputs for debugging..."
            find build/app -type f | sort
            echo "📜 Showing last 200 lines of Gradle log (if available)..."
            find . -name "*.log" -exec tail -n 200 {} \; || true
            exit 1
          fi
          echo "ARTIFACT_PATH=$FILE_PATH" >> $GITHUB_ENV
          echo "ARTIFACT_NAME=Neura-${BUILD_MODE}-${BUILD_FORMAT}-$(date +%Y%m%d-%H%M)" >> $GITHUB_ENV

      - name: 📜 Show artifact path
        run: |
          echo "✅ Build artifact found at: ${{ env.ARTIFACT_PATH }}"
          ls -lh $(dirname "${{ env.ARTIFACT_PATH }}")

      - name: 🔒 Verify signing (release only)
        if: ${{ env.BUILD_MODE == 'release' }}
        run: |
          if [ "$BUILD_FORMAT" = "apk" ]; then
            apksigner verify --verbose ${{ env.ARTIFACT_PATH }}
          else
            jarsigner -verify -verbose -certs ${{ env.ARTIFACT_PATH }}
          fi

      - name: 🚀 Upload to Firebase (release only)
        if: ${{ env.BUILD_MODE == 'release' }}
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.FIREBASE_APP_ID }}
          token: ${{ secrets.FIREBASE_TOKEN }}
          groups: testers
          file: ${{ env.ARTIFACT_PATH }}
          releaseNotes: |
            🚀 Neura v1.0.0+1 (${{ env.BUILD_FORMAT }})
            Built: $(date +'%Y-%m-%d %H:%M')

      - name: ⬆️ Upload to GitHub
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ARTIFACT_PATH }}
          retention-days: 7

      - name: 📏 Show cache sizes
        run: |
          echo "📦 Gradle cache size:" && du -sh ~/.gradle || true
          echo "📦 Maven cache size:" && du -sh ~/.m2 || true
          echo "📦 Kotlin cache size:" && du -sh ~/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlin || true
          echo "📦 Flutter pub cache size:" && du -sh ~/.pub-cache || true

      - name: 🩺 Flutter Doctor (on failure)
        if: failure()
        run: flutter doctor -v
