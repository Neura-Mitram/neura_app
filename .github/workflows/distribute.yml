name: Build & Distribute Neura

on:
  workflow_dispatch:
    inputs:
      build_mode:
        description: 'Build type'
        required: true
        default: 'release'
        type: choice
        options:
          - release
          - debug
      build_format:
        description: 'Build format'
        required: true
        default: 'apk'
        type: choice
        options:
          - apk
          - aab

env:
  BUILD_MODE: ${{ github.event.inputs.build_mode }}
  BUILD_FORMAT: ${{ github.event.inputs.build_format }}

jobs:
  build:
    name: üöÄ Build & Distribute
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: üîÅ Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for versioning or tagging

      - name: ‚öôÔ∏è Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: üßπ Clean Gradle cache (optional but required for Kotlin DSL)
        run: |
          rm -rf ~/.gradle/caches/
          rm -rf ~/.gradle/wrapper/

      - name: ‚öôÔ∏è Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.32.8"
          channel: 'stable'
          cache: true

      - name: üì¶ Cache Flutter & Gradle deps
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            android/.gradle
            .dart_tool
            build
          key: ${{ runner.os }}-flutter-${{ hashFiles('pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-flutter-

      - name: üîê Write google-services.json
        run: |
          mkdir -p android/app
          echo '${{ secrets.FIREBASE_SERVICES }}' > android/app/google-services.json
          echo "‚úÖ Google services configured"
      
      - name: üîÑ Clean Flutter build
        run: flutter clean

      - name: üì¶ Install Flutter dependencies
        run: flutter pub get

      - name: üì• Pre-cache Flutter engine artifacts
        run: flutter precache --android

      - name: üõ†Ô∏è Workaround Ensure gradle can resolve dependencies
        run: |
          echo "android.repositoriesMode=preferSettings" >> gradle.properties

      - name: üîë Configure signing keys (release only)
        if: ${{ env.BUILD_MODE == 'release' }}
        run: |
          echo '${{ secrets.ANDROID_KEYSTORE }}' | base64 -d > android/keystore.jks
          echo "storePassword=${{ secrets.ANDROID_STORE_PASSWORD }}" > android/key.properties
          echo "keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}" >> android/key.properties
          echo "storeFile=../keystore.jks" >> android/key.properties

      - name: üß© Ensure required xml & ic_launcher_round resources exist
        run: |
          ROOT_DIR="android/app/src/main/res"
          INSTALL_IMAGEMAGICK=false
          PLACEHOLDERS=()

          # ‚úÖ Create network_security_config.xml only if missing
          if [ ! -f "$ROOT_DIR/xml/network_security_config.xml" ]; then
            mkdir -p "$ROOT_DIR/xml"
            cat <<EOF > "$ROOT_DIR/xml/network_security_config.xml"
            <?xml version="1.0" encoding="utf-8"?>
            <network-security-config>
                <base-config cleartextTrafficPermitted="true" />
            </network-security-config>
            EOF
                  echo "üìÑ Created network_security_config.xml"
                else
                  echo "‚úÖ network_security_config.xml already exists"
                fi

                # ‚úÖ Find a reference PNG for round icons (if exists anywhere)
                REF_ROUND=$(find "$ROOT_DIR" -name "ic_launcher_round.png" | head -n 1)
                REF_MAIN=$(find "$ROOT_DIR" -name "ic_launcher.png" | head -n 1)

                # ‚úÖ Ensure ic_launcher_round.png exists in each mipmap folder
                for dir in "$ROOT_DIR"/mipmap-*/; do
                  ROUND_ICON="$dir/ic_launcher_round.png"
                  MAIN_ICON="$dir/ic_launcher.png"

                  if [ -f "$ROUND_ICON" ]; then
                    echo "‚úÖ $ROUND_ICON already exists."
                    continue
                  fi

                  if [ -f "$MAIN_ICON" ]; then
                    cp "$MAIN_ICON" "$ROUND_ICON"
                    echo "üìã Copied $MAIN_ICON ‚Üí $ROUND_ICON"
                    continue
                  fi

                  # Use reference round PNG if found
                  if [ -n "$REF_ROUND" ]; then
                    cp "$REF_ROUND" "$ROUND_ICON"
                    echo "üîÑ Copied reference round icon $REF_ROUND ‚Üí $ROUND_ICON"
                    continue
                  fi

                  # Use reference main PNG if found
                  if [ -n "$REF_MAIN" ]; then
                    cp "$REF_MAIN" "$ROUND_ICON"
                    echo "üîç Copied reference main icon $REF_MAIN ‚Üí $ROUND_ICON"
                    continue
                  fi

                  # Mark for placeholder generation if only XML exists
                  XML_ICON=$(find "$ROOT_DIR" -name "ic_launcher.xml" | head -n 1)
                  if [ -n "$XML_ICON" ]; then
                    INSTALL_IMAGEMAGICK=true
                    PLACEHOLDERS+=("$ROUND_ICON")
                  else
                    echo "‚ùå No source found for $ROUND_ICON"
                  fi
                done

                # ‚úÖ Install ImageMagick once if needed
                if [ "$INSTALL_IMAGEMAGICK" = true ]; then
                  echo "üì¶ Installing ImageMagick for placeholder generation..."
                  sudo apt-get update -y && sudo apt-get install -y imagemagick
                  for icon_path in "${PLACEHOLDERS[@]}"; do
                    convert -size 192x192 xc:none -fill "#4CAF50" -draw "circle 96,96 96,10" \
                      -gravity center -pointsize 72 -fill white \
                      -draw "text 0,20 'N'" "$icon_path"
                    echo "‚ö† Generated styled placeholder at $icon_path"
                  done
                fi

      - name: üèóÔ∏è Build APK or AAB
        run: |
          echo "üì¶ Building $BUILD_FORMAT in $BUILD_MODE mode..."
          if [ "$BUILD_MODE" = "release" ]; then
            if [ "$BUILD_FORMAT" = "apk" ]; then
              flutter build apk --release --split-per-abi --no-shrink
            else
              flutter build appbundle --release --no-shrink
            fi
          else
            flutter build apk --debug --split-per-abi
          fi

      - name: üßÆ Set artifact path
        run: |
          if [ "$BUILD_FORMAT" = "aab" ]; then
            echo "ARTIFACT_PATH=build/app/outputs/bundle/release/app-release.aab" >> $GITHUB_ENV
          elif [ "$BUILD_MODE" = "release" ]; then
            echo "ARTIFACT_PATH=build/app/outputs/apk/release/app-release.apk" >> $GITHUB_ENV
          else
            echo "ARTIFACT_PATH=build/app/outputs/apk/debug/app-debug.apk" >> $GITHUB_ENV
          fi
          echo "ARTIFACT_NAME=Neura-${{ env.BUILD_MODE }}-${{ env.BUILD_FORMAT }}-$(date +%Y%m%d-%H%M)" >> $GITHUB_ENV

      - name: üîí Verify code signing (release only)
        if: ${{ env.BUILD_MODE == 'release' }}
        run: |
          if [ "$BUILD_FORMAT" = "apk" ]; then
            apksigner verify --verbose ${{ env.ARTIFACT_PATH }} || exit 1
          else
            jarsigner -verify -verbose -certs ${{ env.ARTIFACT_PATH }} || exit 1
          fi

      - name: üöÄ Upload to Firebase App Distribution (release only)
        if: ${{ env.BUILD_MODE == 'release' }}
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.FIREBASE_APP_ID }}
          token: ${{ secrets.FIREBASE_TOKEN }}
          groups: testers
          file: ${{ env.ARTIFACT_PATH }}
          releaseNotes: |
            üöÄ Neura v1.0.0+1 (${{ env.BUILD_FORMAT }})
            Built: $(date +'%Y-%m-%d %H:%M')

      - name: ‚¨ÜÔ∏è Upload artifact to GitHub
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ARTIFACT_PATH }}
          retention-days: 7

      - name: ü©∫ Flutter Doctor (on failure)
        if: failure()
        run: flutter doctor -v
